// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id              Int       @id @default(autoincrement())
  code            String    @unique
  name            String    @unique @db.VarChar(55)
  password        String    @db.VarChar(255)
  borrowed_books  Borrowbook[]
  penalties       Penalty[] 
  borrowed_count  Int       @default(0)
  role_id         Int?
  role            Role?     @relation(fields:[role_id],references:[id],onDelete:SetNull,onUpdate:SetNull) 
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  @@index([id,code,name])
}

model Role {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  memebers       Member[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  @@index([id,name])
}

model Book {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  title          String    @unique @db.VarChar(255)
  author         String    @db.VarChar(50)
  is_available   Boolean   @default(true)
  stock          Int       @default(1)
  borrowed_books Borrowbook[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  @@index([id,title,author])
}

model Borrowbook {
  id             Int       @id @default(autoincrement())
  member_id      Int
  book_code      String
  borrow_date    DateTime  @default(now())
  return_date    DateTime?
  status_return  Boolean   @default(false)
  member         Member    @relation(fields: [member_id], references: [id], onDelete:Cascade)
  book           Book      @relation(fields: [book_code], references: [code],onDelete:Cascade)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  @@index([id,member_id, book_code])
}

model Penalty {
  id             Int       @id @default(autoincrement())
  member_id      Int       @unique()
  start_date     DateTime  @default(now())
  end_date       DateTime
  member         Member    @relation(fields: [member_id], references: [id],onDelete:Cascade)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  @@index([id,member_id])
}

